<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jing.attendance.model.dao.AttendanceDiaryMapper">

<!-- Result Map-->
<resultMap id="AttendanceDiaryResultMap" type="com.jing.attendance.model.entity.AttendanceDiary">
	<id column="att_id" property="attId"/>
	<result column="employee_id" property="employeeId"/>
	<result column="att_time" property="attTime"/>
	<result column="sys_sign" property="sysSign"/>
	<result column="sign_time" property="signTime"/>
	<result column="sys_out" property="sysOut"/>
	<result column="out_time" property="outTime"/>
	<result column="attendance" property="attendance"/>
	<result column="created_by" property="createdBy"/>
	<result column="created_date" property="createdDate"/>
	<result column="updated_by" property="updatedBy"/>
	<result column="updated_date" property="updatedDate"/>
</resultMap>

<resultMap id="AttendanceDiaryBoResultMap" type="com.jing.attendance.service.bo.AttendanceDiaryBo" extends="AttendanceDiaryResultMap">
	<result column="sign_count" property="signCount"/>
	<result column="out_count" property="outCount"/>
</resultMap>

<sql id="sql_attendanceDiary_item">
	att_id, employee_id, attendance, att_time, sys_sign, sign_time, sys_out, out_time, created_by, created_date, updated_by, updated_date
</sql>
       
<!-- 查询条件 无WHERE -->
<sql id="sql_attendanceDiary_query_nowhere">
	<trim prefix=" " prefixOverrides="AND|OR">
		<if test="attendanceDiary.attId != null">AND att_id = #{attendanceDiary.attId} </if>
		<if test="attendanceDiary.attendance != null">AND attendance = #{attendanceDiary.attendance} </if>
		<if test="attendanceDiary.employeeId != null">AND employee_id like concat(#{attendanceDiary.employeeId}, '%') </if>
		<if test="attendanceDiary.createdBy != null">AND created_by like concat(#{attendanceDiary.createdBy}, '%') </if>
		<if test="attendanceDiary.updatedBy != null">AND updated_by like concat(#{attendanceDiary.updatedBy}, '%') </if>
	</trim>
</sql>
   
<!-- 插入 打卡记录 -->
<insert id="addAttendanceDiary" parameterType="com.jing.attendance.model.entity.AttendanceDiary" >
	<selectKey keyProperty="attId" order="AFTER" resultType="java.lang.Integer">
		SELECT LAST_INSERT_ID()
	</selectKey>
 	INSERT INTO tw_attendance_diary 
	<trim prefix=" (" suffix=")" suffixOverrides=",">
		<if test="attId != null"> att_id,</if>
		<if test="employeeId != null"> employee_id,</if>
		<if test="attendance != null"> attendance,</if>
		<if test="attTime != null"> att_time,</if>
		<if test="sysSign != null"> sys_sign,</if>
		<if test="signTime != null"> sign_time,</if>
		<if test="sysOut != null"> sys_out,</if>
		<if test="outTime != null"> out_time,</if>
		<if test="createdBy != null"> created_by,</if>
		created_date,
		<if test="updatedBy != null"> updated_by,</if>
		updated_date,
	</trim>	 	
	<trim prefix="values (" suffix=")" suffixOverrides=",">
		<if test="attId != null"> #{attId},</if>
		<if test="employeeId != null"> #{employeeId},</if>
		<if test="attendance != null"> #{attendance},</if>
		<if test="attTime != null"> #{attTime},</if>
		<if test="sysSign != null"> #{sysSign},</if>
		<if test="signTime != null"> #{signTime},</if>
		<if test="sysOut != null"> #{sysOut},</if>
		<if test="outTime != null"> #{outTime},</if>
		<if test="createdBy != null"> #{createdBy},</if>
		now(),
		<if test="updatedBy != null"> #{updatedBy},</if>
		now(),
	</trim>
</insert>

<!-- 根据标识，修改 打卡记录 -->  
<update id="modifyAttendanceDiary" parameterType="com.jing.attendance.model.entity.AttendanceDiary" >
  	UPDATE tw_attendance_diary SET
	<trim suffixOverrides=",">
		<if test="employeeId != null"> employee_id = #{employeeId},</if>
		<if test="attendance != null"> attendance = #{attendance},</if>
		<if test="attTime != null"> att_time = #{attTime},</if>
		<if test="sysSign != null"> sys_sign = #{sysSign},</if>
		<if test="signTime != null"> sign_time = now(),</if>
		<if test="sysOut != null"> sys_out = #{sysOut},</if>
		<if test="outTime != null"> out_time = now(),</if>
		<if test="createdBy != null"> created_by = #{createdBy},</if>
		<if test="updatedBy != null"> updated_by = #{updatedBy},</if>
		updated_date = now(),
	</trim>
	WHERE att_id = #{attId}
</update>
 
<!-- 删除 打卡记录 -->
<delete id="dropAttendanceDiaryByAttId" parameterType="java.lang.Integer">
	DELETE FROM tw_attendance_diary WHERE att_id = #{attId}
</delete>

<!-- 根据标识查询 打卡记录 -->
<select id="queryAttendanceDiaryByAttId"  resultMap="AttendanceDiaryResultMap" parameterType="java.lang.Integer">
	SELECT 
	<include refid="sql_attendanceDiary_item"/>
	FROM tw_attendance_diary WHERE att_id = #{attId}
</select>

<!-- 根据属性查询打卡记录 -->
<select id="queryAttendanceDiaryByProperty"  resultMap="AttendanceDiaryResultMap" parameterType="java.util.Map">
	SELECT 
	<include refid="sql_attendanceDiary_item"/>
	FROM tw_attendance_diary 
	<where>
		<include refid="sql_attendanceDiary_query_nowhere"/>
	</where>
</select>

<!-- 根据打卡记录属性与分页信息分页查询打卡记录信息 -->
<select id="queryAttendanceDiaryForPage"  resultMap="AttendanceDiaryResultMap" > 
	SELECT 
	<include refid="sql_attendanceDiary_item"/>
	FROM tw_attendance_diary 
	<where>
		<include refid="sql_attendanceDiary_query_nowhere"/>
	</where>
</select>

<!-- 查询当日考勤员工数 -->
<select id="queryEmployeeCountsToday" resultType="java.lang.Integer">
	select count(1) as counts from tw_attendance_diary where att_time = DATE_FORMAT(NOW(),'%Y-%m-%d')
</select>

<!-- 生成当日已绑定规则的员工考勤信息 -->
<select id="initEmployeeBindingData">
insert into tw_attendance_diary (employee_id, attendance, att_time, sys_sign, sys_out)  
select e.emp_id, d.attendance ,d.att_date, d.sign_time, d.out_time from tw_attendance_employee e
left outer join (
SELECT * from tw_attendance_detail where att_date=DATE_FORMAT(NOW(),'%Y-%m-%d')
) d on e.attendance_id=d.attendance_id
</select>
<!-- 生成当日已未绑定规则的员工考勤信息 -->
<select id="initEmployeeNotBindingData">
insert into tw_attendance_diary (employee_id, attendance, att_time, sys_sign, sys_out)  
select e1.emp_id, d.attendance, d.att_date, d.sign_time, d.out_time from (
select emp_id from (
select e.emp_id, l.attendance_id from tb_employee e LEFT OUTER JOIN tw_attendance_employee l on e.emp_id= l.emp_id
) e1 where attendance_id is null
) e1 CROSS JOIN (select * from tw_attendance_detail where att_date=DATE_FORMAT(NOW(),'%Y-%m-%d') and attendance_id=1) d
</select>

<select id="queryEmployeeYesterdayToday"  parameterType="java.lang.String" resultMap="AttendanceDiaryBoResultMap">
select t.*, TIMESTAMPDIFF(MINUTE, sys_sign, now()) as sign_count, TIMESTAMPDIFF(MINUTE, sys_out, now()) as out_count from(
	select * from tw_attendance_diary where employee_id=#{employeeId}
	and ( DATE_FORMAT(att_time, '%Y-%m-%d')=DATE_FORMAT(now(), '%Y-%m-%d') or DATE_FORMAT(date_add(att_time, INTERVAL  1 DAY), '%Y-%m-%d')=DATE_FORMAT(now(), '%Y-%m-%d'))
) t
</select>


<select id="queryAttendanceDiaryAllForPage" resultType="java.util.Map" parameterType="java.util.Map">
select t.* ,d.* from (
	select att_id attId, employee_id employeeId, attendance, att_time attTime,
	sys_sign sysSign, sign_time signTime, sys_out sysOut, out_time outTime from tw_attendance_diary 
	<where>
		<if test="params.yearMonth != null">AND DATE_FORMAT(att_time,'%Y-%m') = #{params.yearMonth} </if>
		<if test="params.employeeId != null">AND employee_id = #{params.employeeId} </if>
	</where>
) d 
INNER JOIN (
	select e.*, s.store_name storeName from (
		select emp_id empId, emp_name empName, store_id storeId, pinyin, emp_no empNo from tb_employee 
		<where>
			<if test="params.employeeId != null">AND emp_id = #{params.employeeId} </if>
			<if test="params.empCard != null">AND emp_card = #{params.empCard} </if>
			<if test="params.storeId != null">AND store_id = #{params.storeId} </if>
			<if test="params.dptId != null">AND dpt_id = #{params.dptId} </if>			
			<if test="params.namePYJob != null">AND ( emp_name like CONCAT('%',#{params.namePYJob}, '%') or  emp_no like CONCAT('%',#{params.namePYJob}, '%') or  pinyin like CONCAT('%',#{params.namePYJob}, '%') ) </if>
		</where>
	) e left outer join tb_store s on e.storeId=s.store_id
) t on d.employeeId=t.empId

</select>

<select id="queryAttendanceDiaryForPageMap" resultType="java.util.Map" parameterType="java.util.Map">
select p.*, d.att_time as attTime, d.sys_sign as sysSign, d.sign_time as signTime, d.sys_out as sysOut, d.out_time as outTime from (
	select s.store_name storeName, e.*  from (
		select emp_id empId, emp_name empName, store_id storeId, pinyin, emp_no empNo from tb_employee 
		<where>
			<if test="params.employeeId != null">AND emp_id = #{params.employeeId} </if>
			<if test="params.empCard != null">AND emp_card = #{params.empCard} </if>
			<if test="params.storeId != null">AND store_id = #{params.storeId} </if>
			<if test="params.dptId != null">AND dpt_id = #{params.dptId} </if>			
			<if test="params.namePYJob != null">AND ( emp_name like CONCAT('%',#{params.namePYJob}, '%') or  emp_no like CONCAT('%',#{params.namePYJob}, '%') or  pinyin like CONCAT('%',#{params.namePYJob}, '%') ) </if>
		</where>
	) e left outer join tb_store s on e.storeId=s.store_id
) p
RIGHT OUTER JOIN 
(select employee_id, att_time, sys_sign, sign_time, sys_out, out_time from tw_attendance_diary 
	<where>
		<if test="params.yearMonth != null">AND DATE_FORMAT(att_time,'%Y-%m') = #{params.yearMonth} </if>
		<if test="params.employeeId != null">AND employee_id = #{params.employeeId} </if>
	</where>
) d on p.empId = d.employee_id
</select>

<!-- 清除员工末来考勤数据   sys_sign与sys_out条件用以防止DB时间错误引起数据误删-->
<delete id="clearFutureDiaryRecord" parameterType="java.lang.String">
	delete from tw_attendance_diary where employee_id=#{empId} and att_time>DATE_FORMAT(now(),'%Y-%m-%d') and sys_sign is null and sys_out is null
</delete>

<!-- 清除规则下所有员工末来考勤数据   sys_sign与sys_out条件用以防止DB时间错误引起数据误删 -->
<delete id="clearFutureDiaryRecordByAttendanceId" parameterType="java.lang.Integer">
	delete from tw_attendance_diary where employee_id in (select emp_id from tw_attendance_employee where attendance_id=#{attendanceId}) and att_time>DATE_FORMAT(now(),'%Y-%m-%d') and sys_sign is null and sys_out is null
</delete>

<!-- 重建员工末来考勤数据 -->
<insert id="insertFutureDiaryRecordByEmployeeId" parameterType="java.lang.String">
	insert into tw_attendance_diary (employee_id, attendance, att_time, sys_sign, sys_out, created_date, created_by, updated_date)
	select #{empId}, attendance, att_date, sign_time, out_time, now(), 'system', NOW() from tw_attendance_detail 
	where attendance_id=8 and att_date>DATE_FORMAT(now(),'%Y-%m-%d') ORDER BY att_date asc	
</insert>

<!-- 重建规则下所有员工末来考勤数据 -->
<insert id="insertFutureDiaryRecordByAttendanceId" parameterType="java.lang.Integer">
	insert into tw_attendance_diary (employee_id, attendance, att_time, sys_sign, sys_out, created_date, created_by, updated_date)
	select b.*, t.*, now() as created_date, 'system' as created_by, NOW() as updated_date  from (
		select attendance, att_date, sign_time, out_time from tw_attendance_detail where attendance_id=#{attendanceId} and att_date>DATE_FORMAT(now(),'%Y-%m-%d') 
	) t CROSS join (select emp_id from tw_attendance_employee where attendance_id=#{attendanceId}) b
</insert>

</mapper>   
